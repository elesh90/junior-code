/** searching in the BST */
search(data) {
    // empty tree
    if (!root) return;

    // start from root node
    let current = root;

    while (current.data !== data) {
        // data greater than current element
        if (data > current.data) {
            //you are on a leaf node, nowhere to go
            if (!current.rightNode) return;
            // go to the right subtree
            current = current.rightNode;
        } else {
            // you are on a leaf node, nowhere to go
            if (!current.leftNode) return;
            // go to the left subtree
            current = current.leftNode;
        }
    }

    return current;
}

/** inserting in the BST */
insert(data) {
    // empty tree, insert the first node (the root node)
    if (!root) {
        root = new Node(data);
        return root;
    }

    // start from the root node
    let current = root;

    while (true) {
        if (data > current.data) {
            // search for an empty position in the right subtree
            if (current.rightNode) {
                current = current.rightNode;
            } else {
                // insert node
                current.rightNode = new Node(data);
                return current.rightNode;
            }
        } else {
            // search for an empty position in the left subtree
            if (current.leftNode) {
                current = current.leftNode;
            } else {
                // insert node
                current.leftNode = new Node(data);
                return current.leftNode;
            } 
        }
    }
}


/** BST traversal */
/** IN-ORDER TRAVERSAL */
inOrderTraversal(node) {
    if (node) {
        inOrderTraversal(node.leftNode);
        console.log(node.data);
        inOrderTraversal(node.rightNode);
    }
}

/** PRE-ORDER TRAVERSAL */
preOrderTraversal(node) {
    if (node) {
        this.postOrderTraversal(node.leftNode);
        this.postOrderTraversal(node.rightNode);
        console.log(node.data); 
    }
}